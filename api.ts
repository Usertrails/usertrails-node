/* tslint:disable */
/* eslint-disable */
/**
 * Usertrails
 * The Usertrails REST API. Please see https://usertrails.io/docs/api for more details.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * We use standard HTTP responses for errors. 200 HTTP success, 40X for invalid request, and 50X codes server issues.  Null for no issues.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A broad categorization of the error. Safe for programmatic use.
     * @type {string}
     * @memberof ModelError
     */
    'error_type': ModelErrorErrorTypeEnum;
    /**
     * The particular error code. Safe for programmatic use.
     * @type {string}
     * @memberof ModelError
     */
    'error_code': string;
    /**
     * Changes overtime, not safe for programmatic use.
     * @type {string}
     * @memberof ModelError
     */
    'error_message': string;
    /**
     * The HTTP status code associated with the error.
     * @type {number}
     * @memberof ModelError
     */
    'status'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelErrorErrorTypeEnum {
    InvalidRequest = 'INVALID_REQUEST',
    InvalidResult = 'INVALID_RESULT',
    InvalidInput = 'INVALID_INPUT',
    RateLimitExceeded = 'RATE_LIMIT_EXCEEDED',
    ApiError = 'API_ERROR'
}

/**
 * Profile defines the request schema for profile
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * Your Usertrails API `client_id`. The `client_id` is required and may be provided either in the `Usertrails-client` header or as part of a request body.
     * @type {string}
     * @memberof Profile
     */
    'client': string;
    /**
     * Your Usertrails API `secret`. The `secret` is required and may be provided either in the `Usertrails-secret` header or as part of a request body.
     * @type {string}
     * @memberof Profile
     */
    'secret': string;
    /**
     * Your Usertrails API `client_id`. The `client_id` is required and may be provided either in the `Usertrails-client` header or as part of a request body.
     * @type {string}
     * @memberof Profile
     */
    'environment'?: string;
    /**
     * Documented
     * @type {string}
     * @memberof Profile
     */
    'id'?: string;
    /**
     * Documented
     * @type {object}
     * @memberof Profile
     */
    'data'?: object;
}
/**
 * Request to list connected applications for a user.
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * Your Usertrails API `client_id`. The `client_id` is required and may be provided either in the `Usertrails-client` header or as part of a request body.
     * @type {string}
     * @memberof Record
     */
    'client': string;
    /**
     * Your Usertrails API `secret`. The `secret` is required and may be provided either in the `Usertrails-secret` header or as part of a request body.
     * @type {string}
     * @memberof Record
     */
    'secret': string;
    /**
     * Your Usertrails API `client_id`. The `client_id` is required and may be provided either in the `Usertrails-client` header or as part of a request body.
     * @type {string}
     * @memberof Record
     */
    'environment'?: string;
    /**
     * Documented
     * @type {string}
     * @memberof Record
     */
    'id'?: string;
    /**
     * Documented
     * @type {string}
     * @memberof Record
     */
    'tag'?: string;
    /**
     * Documented
     * @type {object}
     * @memberof Record
     */
    'data'?: object;
}

/**
 * UsertrailsApi - axios parameter creator
 * @export
 */
export const UsertrailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method will create a profile to which you can attach a trail, most important part of this is the {id} keyword.
         * @summary Creates a User Profile for your Product.
         * @param {Profile} profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profile: async (profile: Profile, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('profile', 'profile', profile)
            const localVarPath = `/packages/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "clientId", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method will create a trail tagged to the unique {profile} {id}
         * @summary Records a trail of the User Profile.
         * @param {Record} record 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        record: async (record: Record, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'record' is not null or undefined
            assertParamExists('record', 'record', record)
            const localVarPath = `/packages/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication clientId required
            await setApiKeyToObject(localVarHeaderParameter, "clientId", configuration)

            // authentication secret required
            await setApiKeyToObject(localVarHeaderParameter, "secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(record, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsertrailsApi - functional programming interface
 * @export
 */
export const UsertrailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsertrailsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method will create a profile to which you can attach a trail, most important part of this is the {id} keyword.
         * @summary Creates a User Profile for your Product.
         * @param {Profile} profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profile(profile: Profile, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profile(profile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method will create a trail tagged to the unique {profile} {id}
         * @summary Records a trail of the User Profile.
         * @param {Record} record 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async record(record: Record, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.record(record, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsertrailsApi - factory interface
 * @export
 */
export const UsertrailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsertrailsApiFp(configuration)
    return {
        /**
         * This method will create a profile to which you can attach a trail, most important part of this is the {id} keyword.
         * @summary Creates a User Profile for your Product.
         * @param {Profile} profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profile(profile: Profile, options?: any): AxiosPromise<Profile> {
            return localVarFp.profile(profile, options).then((request) => request(axios, basePath));
        },
        /**
         * This method will create a trail tagged to the unique {profile} {id}
         * @summary Records a trail of the User Profile.
         * @param {Record} record 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        record(record: Record, options?: any): AxiosPromise<Record> {
            return localVarFp.record(record, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsertrailsApi - object-oriented interface
 * @export
 * @class UsertrailsApi
 * @extends {BaseAPI}
 */
export class UsertrailsApi extends BaseAPI {
    /**
     * This method will create a profile to which you can attach a trail, most important part of this is the {id} keyword.
     * @summary Creates a User Profile for your Product.
     * @param {Profile} profile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsertrailsApi
     */
    public profile(profile: Profile, options?: AxiosRequestConfig) {
        return UsertrailsApiFp(this.configuration).profile(profile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method will create a trail tagged to the unique {profile} {id}
     * @summary Records a trail of the User Profile.
     * @param {Record} record 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsertrailsApi
     */
    public record(record: Record, options?: AxiosRequestConfig) {
        return UsertrailsApiFp(this.configuration).record(record, options).then((request) => request(this.axios, this.basePath));
    }
}


